//DELETE AT BEGINNING
class Node {
    int data;
    Node next;
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}
public class LL {
    static Node deleteHead(Node head) {
        if (head == null)
            return null;
        Node temp = head;
        // Move the head pointer to the next node
        head = head.next;
        // Help the garbage collector by 
      	// removing the reference
        temp = null;
        return head;
    }

//DELETE FROM END OF LL
// Function to remove the last node of the linked list
    public static Node removeLastNode(Node head)
    {
        // If the list is empty, return null
        if (head == null) {
            return null;
        }
        // If the list has only one node, delete it and
        // return null
        if (head.next == null) {
            return null;
        }
        // Find the second last node
        Node secondLast = head;
        while (secondLast.next.next != null) {   //Start from head and keep moving forward until secondLast.next.next == null.
            secondLast = secondLast.next;
        }
        // Delete the last node
        secondLast.next = null;
        return head;
    }

 // DELETE NODE AT SPECIFIC POSITION
      // Function to delete a node at a given position
    public static Node deleteNode(Node head, int position)
    {
        Node temp = head;
        Node prev = null;

    // Base case if linked list is empty
        if (temp == null)
            return head;
   // Case 1: Head is to be deleted
        if (position == 1) {
            head = temp.next;
            return head;
        }
// Traverse till given position
        for (int i = 1; temp != null && i < position; i++) {
            prev = temp;
            temp = temp.next;
        }
// If given position is found, delete node
        if (temp != null) {
            prev.next = temp.next;
        }
        else {
            System.out.println("Data not present");
        }

        return head;
    }


    static void printList(Node curr) {
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
    }
